name: CI/CD Pipeline - Passport-Buddy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run type-check || npx tsc --noEmit

      - name: Run linting
        run: npm run lint || echo "Linting step skipped - no lint script found"

      - name: Run tests
        run: npm test -- --coverage --watchAll=false || echo "Tests skipped - no test script found"

      - name: Build frontend
        run: npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 1

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: passport_buddy_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compilation
        run: npm run build

      - name: Run tests
        run: npm test || echo "Tests skipped - no test script found"
        env:
          MONGODB_URI: mongodb://localhost:27017/passport_buddy_test
          JWT_SECRET: test-secret-key

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist/
          retention-days: 1

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to DigitalOcean Droplet
    needs: [build-images]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Verify SSH connection
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o ConnectTimeout=10 \
            ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} 'echo "SSH connection successful"'

      - name: Create deployment directory
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} '
            sudo mkdir -p /opt/passport-buddy
            sudo chown -R $USER:$USER /opt/passport-buddy
          '

      - name: Copy docker-compose and environment files
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -r \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./docker-compose.yml \
            ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }}:/opt/passport-buddy/

      - name: Create production environment file
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} '
            cat > /opt/passport-buddy/.env << EOF
            NODE_ENV=production
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            AIRLABS_API_KEY=${{ secrets.AIRLABS_API_KEY }}
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            EOF
          '

      - name: Create production docker-compose override
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} '
            cat > /opt/passport-buddy/docker-compose.prod.yml << EOF
            services:
              frontend:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
                restart: unless-stopped
                ports:
                  - "80:3000"
                environment:
                  - REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
                volumes: []

              backend:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
                restart: unless-stopped
                ports:
                  - "5001:5000"
                env_file:
                  - .env
                volumes: []

              mongodb:
                restart: unless-stopped
                volumes:
                  - mongodb_data:/data/db
                environment:
                  - MONGO_INITDB_DATABASE=passport_buddy

            volumes:
              mongodb_data:
            EOF
          '

      - name: Log in to Container Registry on server
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} '
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          '

      - name: Deploy application
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} '
            cd /opt/passport-buddy
            
            # Pull latest images
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
            
            # Stop existing containers
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
            
            # Start new containers
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            
            # Clean up old images
            docker image prune -f
            
            # Wait for services to be ready
            sleep 30
            
            # Health check
            curl -f http://localhost:5001/ || exit 1
          '

      - name: Configure reverse proxy (Nginx)
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} '
            # Install Nginx if not present
            if ! command -v nginx &> /dev/null; then
              sudo apt update
              sudo apt install -y nginx
            fi
            
            # Create Nginx configuration
            sudo tee /etc/nginx/sites-available/passport-buddy > /dev/null << EOF
            server {
                listen 80;
                server_name ${{ secrets.DOMAIN_NAME }} www.${{ secrets.DOMAIN_NAME }};
                
                # Frontend
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
                
                # Backend API
                location /api {
                    proxy_pass http://localhost:5001;
                    proxy_http_version 1.1;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF
            
            # Enable the site
            sudo ln -sf /etc/nginx/sites-available/passport-buddy /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test and reload Nginx
            sudo nginx -t && sudo systemctl reload nginx
            sudo systemctl enable nginx
          '

      

      - name: Deployment health check
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 60
          
          # Check if services are running
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_IP }} '
            cd /opt/passport-buddy
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps
            
            # Test API endpoint
            curl -f http://localhost:5001/api/auth || echo "API health check failed"
            
            # Test frontend
            curl -f http://localhost:3000 || echo "Frontend health check failed"
          '

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "🌐 Application should be available at: ${{ secrets.DOMAIN_NAME || 'your-server-ip' }}"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs above for details."
